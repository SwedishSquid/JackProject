class CellsAuto {
    field Array currentState;
    field Array futureState;
    field int arrLen;
    field Array currentRule;

    constructor CellsAuto new(Array arr, int n, Array rule){
        let arrLen = n;
        let currentState = arr;
        let futureState = Array.new(n);
        let currentRule = rule;
        return this;
    }

    method Array getCurrentState(){
        return currentState;
    }

    method int getArrLen(){
        return arrLen;
    }

    method void buildFutureState(){
        var Array buffer;
        var int i, border;
        var bool left, middle, right;
        var bool result;
        let left = currentState[arrLen-1];
        let middle = currentState[0];
        let right = currentState[1];
        let i = 0;
        let border = arrLen-1;
        while (i < border){
            let futureState[i] = CalculateResult(left, middle, right);
            let i = i + 1;
            let left = currentState[i-1];
            let middle = currentState[i];
            let right = currentState[i+1];
        }

        let left = currentState[arrLen-2];
        let middle = currentState[arrLen-1];
        let right = currentState[0];
        let futureState[border] = CalculateResult(left, middle, right);

        let buffer = futureState;   //wow
        let futureState = currentState;
        let currentState = buffer;
        return;
    }

    method bool CalculateResult(bool left, bool middle, bool right){
        var bool result;
        if (left){
            if (middle){
                if (right){
                    let result = currentRule[0];
                }
                else{
                    let result = currentRule[1];
                }
            }
            else{
                if (right){
                    let result = currentRule[2];
                }
                else{
                    let result = currentRule[3];
                }
            }
        }
        else{
            if (middle){
                if (right){
                    let result = currentRule[4];
                }
                else{
                    let result = currentRule[5];
                }
            }
            else{
                if (right){
                    let result = currentRule[6];
                }
                else{
                    let result = currentRule[7];
                }
            }
        }
        return result;
    }

    method void dispose(){
        do currentRule.dispose();
        do futureState.dispose();
        do currentState.dispose();
        do Memory.deAlloc(this);
        return;
    }
}